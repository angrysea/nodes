package org.amg.node.xmltools.xmlconverter;

import java.io.*;

public class RepositoryInfoClassGenerator {

	public RepositoryInfoClassGenerator() {
	}

	public static void generate(File baseFile, String schemaFileName,
			String packageName) throws IOException {
		String fileName = String.valueOf(String.valueOf((new StringBuffer(
				String.valueOf(String.valueOf(baseFile.getAbsolutePath()))))
				.append(File.separator).append("_Repository_Info")
				.append(".java")));
		File source = new File(fileName);
		BufferedWriter b = new BufferedWriter(new FileWriter(source));
		b.write(String.valueOf(String.valueOf((new StringBuffer(
				"// Title:        _Repository_Info")).append(eol))));
		b.write("// Copyright:    Copyright (c) 2001".concat(String
				.valueOf(String.valueOf(eol))));
		b.write("// Author:       XML to Java Wizard".concat(String
				.valueOf(String.valueOf(eol))));
		b.write("// Company:      DB.".concat(String.valueOf(String
				.valueOf(eol))));
		b.write("// Description:  This class was generated by the XML to Java Wizard."
				.concat(String.valueOf(String.valueOf(eol))));
		b.write("//               It contains information on the source schema that was used to"
				.concat(String.valueOf(String.valueOf(eol))));
		b.write("//               create this repository package."
				.concat(String.valueOf(String.valueOf(eol))));
		b.write(String.valueOf(String.valueOf((new StringBuffer(
				"// Schema name:  ")).append(schemaFileName).append(eol))));
		b.write("// Java SDK:     1.2.2 or later");
		b.write(String.valueOf(eol) + String.valueOf(eol));
		if (packageName != null)
			b.write(String.valueOf(String
					.valueOf((new StringBuffer("package ")).append(packageName)
							.append(";").append(eol).append(eol))));
		schemaFileName = addEscapeChars(schemaFileName);
		b.write(String.valueOf(String.valueOf((new StringBuffer(
				"public class _Repository_Info")).append(eol))));
		b.write("{".concat(String.valueOf(String.valueOf(eol))));
		b.write(String.valueOf(String.valueOf((new StringBuffer(
				"\tpublic static String getRepositoryURI()")).append(eol))));
		b.write("\t{".concat(String.valueOf(String.valueOf(eol))));
		b.write(String.valueOf(String
				.valueOf((new StringBuffer("\t\treturn \""))
						.append(schemaFileName).append("\";").append(eol))));
		b.write("\t}".concat(String.valueOf(String.valueOf(eol))));
		b.write("}".concat(String.valueOf(String.valueOf(eol))));
		b.write(eol);
		b.close();
	}

	private static String addEscapeChars(String str) {
		StringBuffer buff = new StringBuffer(str);
		for (int i = 0; i < buff.length(); i++) {
			char ch = buff.charAt(i);
			if (ch == '\\') {
				buff.insert(i, '\\');
				i++;
			}
		}

		return buff.toString();
	}

	private static final String eol = System.getProperty("line.separator");

}
